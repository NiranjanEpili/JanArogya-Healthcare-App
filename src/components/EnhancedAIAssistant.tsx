import React, { useState, useEffect, useRef } from 'react';
import { Bot, Volume2, VolumeX, Mic, MicOff, WifiOff, Brain, Loader2, Heart, Sparkles, MessageCircle, Phone, Calendar, Pill, Users, ShieldAlert, Star } from 'lucide-react';
import { motion, AnimatePresence } from 'motion/react';
import { demoOfflineManager } from '../utils/offline/demoOffline';
import { projectId, publicAnonKey } from '../utils/supabase/info';

interface EnhancedAIAssistantProps {
  language: 'en' | 'hi' | 'pa' | 'bn';
  currentPage: string;
  onNavigate: (page: string) => void;
  onAction?: (action: string, data?: any) => void;
}

interface AIPersonality {
  name: string;
  avatar: string;
  mood: 'happy' | 'caring' | 'serious' | 'energetic';
  responses: string[];
}

export function EnhancedAIAssistant({ language, currentPage, onNavigate, onAction }: EnhancedAIAssistantProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [conversation, setConversation] = useState<Array<{role: 'user' | 'assistant', content: string, timestamp: Date}>>([]);
  const [currentTranscript, setCurrentTranscript] = useState('');
  const [isOffline, setIsOffline] = useState(!navigator.onLine);
  const [aiPersonality, setAiPersonality] = useState<AIPersonality>({
    name: 'Dr. Maya',
    avatar: 'üë©‚Äç‚öïÔ∏è',
    mood: 'caring',
    responses: []
  });
  
  const recognitionRef = useRef<any>(null);
  const synthRef = useRef<SpeechSynthesisUtterance | null>(null);
  const conversationRef = useRef<HTMLDivElement>(null);

  // Enhanced multilingual content with natural conversation flows
  const content = {
    greeting: {
      en: "Hello! I'm Dr. Maya, your personal healthcare assistant. I'm here to help you with everything - from booking appointments to managing your family's health. What would you like to do today?",
      hi: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§°‡•â. ‡§Æ‡§æ‡§Ø‡§æ ‡§π‡•Ç‡§Ç, ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï‡•§ ‡§Æ‡•à‡§Ç ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï‡§ø‡§Ç‡§ó ‡§∏‡•á ‡§≤‡•á‡§ï‡§∞ ‡§Ü‡§™‡§ï‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡•á ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡•á ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§§‡§ï ‡§∏‡§¨ ‡§ï‡•Å‡§õ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§ú ‡§Ü‡§™ ‡§ï‡•ç‡§Ø‡§æ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?",
      pa: "‡®∏‡®§ ‡®∏‡©ç‡®∞‡©Ä ‡®Ö‡®ï‡®æ‡®≤! ‡®Æ‡©à‡®Ç ‡®°‡®æ. ‡®Æ‡®æ‡®á‡®Ü ‡®π‡®æ‡®Ç, ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®®‡®ø‡©±‡®ú‡©Ä ‡®∏‡®ø‡®π‡®§ ‡®∏‡®π‡®æ‡®á‡®ï‡•§ ‡®Æ‡©à‡®Ç ‡®Æ‡©Å‡®≤‡®æ‡®ï‡®æ‡®§ ‡®¨‡©Å‡©±‡®ï ‡®ï‡®∞‡®® ‡®§‡©ã‡®Ç ‡®≤‡©à ‡®ï‡©á ‡®§‡©Å‡®π‡®æ‡®°‡©á ‡®™‡®∞‡®ø‡®µ‡®æ‡®∞ ‡®¶‡©Ä ‡®∏‡®ø‡®π‡®§ ‡®¶‡©á ‡®™‡©ç‡®∞‡®¨‡©∞‡®ß‡®® ‡®§‡©±‡®ï ‡®π‡®∞ ‡®ö‡©Ä‡®ú‡®º ‡®µ‡®ø‡©±‡®ö ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®Æ‡®¶‡®¶ ‡®ï‡®∞‡®® ‡®≤‡®à ‡®á‡©±‡®•‡©á ‡®π‡®æ‡®Ç‡•§ ‡®Ö‡©±‡®ú ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®ï‡©Ä ‡®ï‡®∞‡®®‡®æ ‡®ö‡®æ‡®π‡©ã‡®ó‡©á?",
      bn: "‡¶®‡¶Æ‡¶∏‡ßç‡¶ï‡¶æ‡¶∞! ‡¶Ü‡¶Æ‡¶ø ‡¶°‡¶æ‡¶É ‡¶Æ‡¶æ‡¶Ø‡¶º‡¶æ, ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶ó‡¶§ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶∏‡¶π‡¶æ‡¶Ø‡¶º‡¶ï‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßÅ‡¶ï‡¶ø‡¶Ç ‡¶•‡ßá‡¶ï‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞‡ßá‡¶∞ ‡¶∏‡ßç‡¶¨‡¶æ‡¶∏‡ßç‡¶•‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡ßç‡¶•‡¶æ‡¶™‡¶®‡¶æ ‡¶™‡¶∞‡ßç‡¶Ø‡¶®‡ßç‡¶§ ‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ‡¶§‡ßá ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶õ‡¶ø‡•§ ‡¶Ü‡¶ú ‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡ßÄ ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®?"
    },
    listening: {
      en: "I'm listening... Please tell me how I can help you today.",
      hi: "‡§Æ‡•à‡§Ç ‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç... ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¨‡§§‡§æ‡§è‡§Ç ‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§",
      pa: "‡®Æ‡©à‡®Ç ‡®∏‡©Å‡®£ ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç... ‡®ï‡®ø‡®∞‡®™‡®æ ‡®ï‡®∞‡®ï‡©á ‡®¶‡©±‡®∏‡©ã ‡®Ö‡©±‡®ú ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®ï‡®ø‡®µ‡©á‡®Ç ‡®Æ‡®¶‡®¶ ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡®æ ‡®π‡®æ‡®Ç‡•§",
      bn: "‡¶Ü‡¶Æ‡¶ø ‡¶∂‡ßÅ‡¶®‡¶õ‡¶ø... ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶≤‡ßÅ‡¶® ‡¶Ü‡¶ú ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§"
    },
    processing: {
      en: "Let me think about that... I'm checking the best way to help you.",
      hi: "‡§Æ‡•Å‡§ù‡•á ‡§á‡§∏‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡•ã‡§ö‡§®‡•á ‡§¶‡•Ä‡§ú‡§ø‡§è... ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§¨‡§∏‡•á ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§¶‡•á‡§ñ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§",
      pa: "‡®Æ‡©à‡®®‡©Ç‡©∞ ‡®á‡®∏ ‡®¨‡®æ‡®∞‡©á ‡®∏‡©ã‡®ö‡®£ ‡®¶‡®ø‡®ì... ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®Æ‡®¶‡®¶ ‡®ï‡®∞‡®® ‡®¶‡®æ ‡®∏‡®≠ ‡®§‡©ã‡®Ç ‡®µ‡®ß‡©Ä‡®Ü ‡®§‡®∞‡©Ä‡®ï‡®æ ‡®¶‡©á‡®ñ ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç‡•§",
      bn: "‡¶Ü‡¶Æ‡¶æ‡¶ï‡ßá ‡¶è‡¶ü‡¶æ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶≠‡¶æ‡¶¨‡¶§‡ßá ‡¶¶‡¶ø‡¶®... ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶¨‡¶ö‡ßá‡¶Ø‡¶º‡ßá ‡¶≠‡¶æ‡¶≤‡ßã ‡¶â‡¶™‡¶æ‡¶Ø‡¶º ‡¶ñ‡ßÅ‡¶Å‡¶ú‡¶õ‡¶ø‡•§"
    },
    offlineMode: {
      en: "I'm working in offline mode right now, but I can still help you with most tasks. What do you need?",
      hi: "‡§Æ‡•à‡§Ç ‡§Ö‡§≠‡•Ä ‡§ë‡§´‡§≤‡§æ‡¶á‡§® ‡§Æ‡•ã‡¶° ‡§Æ‡•á‡§Ç ‡§ï‡§æ‡§Æ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç, ‡§≤‡•á‡§ï‡§ø‡§® ‡§´‡§ø‡§∞ ‡§≠‡•Ä ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§Ö‡§ß‡§ø‡§ï‡§æ‡§Ç‡§∂ ‡§ï‡§æ‡§Æ‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡•ç‡§Ø‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?",
      pa: "‡®Æ‡©à‡®Ç ‡®´‡®ø‡®≤‡®π‡®æ‡®≤ ‡®î‡®´‡®≤‡®æ‡®à‡®® ‡®Æ‡©ã‡®° ‡®µ‡®ø‡©±‡®ö ‡®ï‡©∞‡®Æ ‡®ï‡®∞ ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç, ‡®™‡®∞ ‡®´‡®ø‡®∞ ‡®µ‡©Ä ‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®°‡©á ‡®ú‡®º‡®ø‡®Ü‡®¶‡®æ‡®§‡®∞ ‡®ï‡©∞‡®Æ‡®æ‡®Ç ‡®µ‡®ø‡©±‡®ö ‡®§‡©Å‡®π‡®æ‡®°‡©Ä ‡®Æ‡®¶‡®¶ ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡®æ ‡®π‡®æ‡®Ç‡•§ ‡®§‡©Å‡®π‡®æ‡®®‡©Ç‡©∞ ‡®ï‡©Ä ‡®ö‡®æ‡®π‡©Ä‡®¶‡®æ ‡®π‡©à?",
      bn: "‡¶Ü‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶® ‡¶Æ‡ßã‡¶°‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶õ‡¶ø, ‡¶§‡¶¨‡ßÅ‡¶ì ‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø‡¶∞‡¶≠‡¶æ‡¶ó ‡¶ï‡¶æ‡¶ú‡ßá ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡•§ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ï‡ßÄ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®?"
    }
  };

  // Check network status
  useEffect(() => {
    const updateOnlineStatus = () => setIsOffline(!navigator.onLine);
    window.addEventListener('online', updateOnlineStatus);
    window.addEventListener('offline', updateOnlineStatus);
    return () => {
      window.removeEventListener('online', updateOnlineStatus);
      window.removeEventListener('offline', updateOnlineStatus);
    };
  }, []);

  // Initialize AI personality based on time and context
  useEffect(() => {
    const hour = new Date().getHours();
    let mood: 'happy' | 'caring' | 'serious' | 'energetic' = 'caring';
    
    if (hour < 12) mood = 'energetic';
    else if (hour < 17) mood = 'happy';
    else if (hour < 20) mood = 'caring';
    else mood = 'serious';

    setAiPersonality(prev => ({ ...prev, mood }));
  }, []);

  // Auto-scroll conversation
  useEffect(() => {
    if (conversationRef.current) {
      conversationRef.current.scrollTop = conversationRef.current.scrollHeight;
    }
  }, [conversation]);

  // Enhanced speech synthesis with natural voice
  const speak = (text: string, priority: 'high' | 'normal' = 'normal') => {
    if (isSpeaking && priority !== 'high') return;
    
    speechSynthesis.cancel();
    
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = language === 'hi' ? 'hi-IN' : 
                     language === 'pa' ? 'pa-IN' : 
                     language === 'bn' ? 'bn-IN' : 'en-US';
    
    // Make voice more natural and caring
    utterance.rate = 0.9;
    utterance.pitch = 1.1;
    utterance.volume = 0.8;
    
    utterance.onstart = () => setIsSpeaking(true);
    utterance.onend = () => setIsSpeaking(false);
    
    synthRef.current = utterance;
    speechSynthesis.speak(utterance);
  };

  // Enhanced speech recognition with continuous listening
  const startListening = () => {
    if (!('webkitSpeechRecognition' in window)) {
      speak(language === 'hi' ? '‡§Æ‡§æ‡§´ ‡§ï‡§∞‡•á‡§Ç, ‡§Ü‡§™‡§ï‡§æ ‡§¨‡•ç‡§∞‡§æ‡§â‡§ú‡§º‡§∞ ‡§µ‡•â‡§á‡§∏ ‡§∞‡§ø‡§ï‡§ó‡•ç‡§®‡§ø‡§∂‡§® ‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞‡§§‡§æ‡•§' : 'Sorry, your browser does not support voice recognition.');
      return;
    }

    const recognition = new (window as any).webkitSpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = language === 'hi' ? 'hi-IN' : 
                       language === 'pa' ? 'pa-IN' : 
                       language === 'bn' ? 'bn-IN' : 'en-US';

    recognition.onstart = () => {
      setIsListening(true);
      setCurrentTranscript('');
      speak(content.listening[language], 'high');
    };

    recognition.onresult = (event: any) => {
      let transcript = '';
      for (let i = event.resultIndex; i < event.results.length; i++) {
        transcript += event.results[i][0].transcript;
      }
      setCurrentTranscript(transcript);
    };

    recognition.onend = () => {
      setIsListening(false);
      if (currentTranscript.trim()) {
        handleVoiceInput(currentTranscript);
      }
    };

    recognition.onerror = (event: any) => {
      setIsListening(false);
      console.error('Speech recognition error:', event.error);
      speak(language === 'hi' ? '‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§' : 'I had trouble understanding. Please try again.');
    };

    recognitionRef.current = recognition;
    recognition.start();
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
    setIsListening(false);
  };

  // Comprehensive voice command processor with natural conversation
  const handleVoiceInput = async (userInput: string) => {
    setIsProcessing(true);
    
    // Add user message to conversation
    const userMessage = { role: 'user' as const, content: userInput, timestamp: new Date() };
    setConversation(prev => [...prev, userMessage]);

    try {
      let response = '';
      let action = '';

      // Process natural language commands
      const input = userInput.toLowerCase();
      
      // Navigation commands
      if (input.includes('home') || input.includes('‡§π‡•ã‡§Æ') || input.includes('‡®ò‡®∞') || input.includes('‡¶π‡ßã‡¶Æ')) {
        onNavigate('home');
        response = language === 'hi' ? '‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã ‡§π‡•ã‡§Æ ‡§™‡•á‡§ú ‡§™‡§∞ ‡§≤‡•á ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§' :
                   language === 'pa' ? '‡®Æ‡©à‡®Ç ‡®§‡©Å‡®π‡®æ‡®®‡©Ç‡©∞ ‡®π‡©ã‡®Æ ‡®™‡©á‡®ú ‡®§‡©á ‡®≤‡©à ‡®ú‡®æ ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç‡•§' :
                   language === 'bn' ? '‡¶Ü‡¶Æ‡¶ø ‡¶Ü‡¶™‡¶®‡¶æ‡¶ï‡ßá ‡¶π‡ßã‡¶Æ ‡¶™‡ßá‡¶ú‡ßá ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡¶ø‡•§' :
                   'Taking you to the home page.';
      }
      // Patient portal
      else if (input.includes('patient') || input.includes('‡§Æ‡§∞‡•Ä‡§ú') || input.includes('‡®Æ‡®∞‡©Ä‡®ú‡®º') || input.includes('‡¶∞‡ßã‡¶ó‡ßÄ') ||
               input.includes('book') || input.includes('appointment') || input.includes('‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü')) {
        onNavigate('patient');
        response = language === 'hi' ? '‡§™‡•á‡§∂‡•á‡§Ç‡§ü ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§ñ‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ø‡§π‡§æ‡§Ç ‡§Ü‡§™ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç, ‡§Ö‡§™‡§®‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§' :
                   language === 'pa' ? '‡®™‡©á‡®∏‡®º‡©à‡®Ç‡®ü ‡®™‡©ã‡®∞‡®ü‡®≤ ‡®ñ‡©ã‡®≤‡©ç‡®π ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç‡•§ ‡®á‡©±‡®•‡©á ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Æ‡©Å‡®≤‡®æ‡®ï‡®æ‡®§ ‡®¨‡©Å‡©±‡®ï ‡®ï‡®∞ ‡®∏‡®ï‡®¶‡©á ‡®π‡©ã‡•§' :
                   language === 'bn' ? '‡¶™‡ßá‡¶∂‡ßá‡¶®‡ßç‡¶ü ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶≤‡¶õ‡¶ø‡•§ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü ‡¶¨‡ßÅ‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§' :
                   'Opening patient portal. Here you can book appointments and manage your family\'s health.';
      }
      // Emergency
      else if (input.includes('emergency') || input.includes('‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤') || input.includes('‡®ê‡®Æ‡®∞‡®ú‡©à‡®Ç‡®∏‡©Ä') || input.includes('‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø') ||
               input.includes('help') || input.includes('‡§Æ‡§¶‡§¶') || input.includes('urgent') || input.includes('108')) {
        onNavigate('emergency');
        response = language === 'hi' ? 'üö® ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§∏‡•á ‡§ú‡•ã‡§°‡§º ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç! ‡§∂‡§æ‡§Ç‡§§ ‡§∞‡§π‡•á‡§Ç‡•§' :
                   language === 'pa' ? 'üö® ‡®§‡©Å‡®∞‡©∞‡®§ ‡®ê‡®Æ‡®∞‡®ú‡©à‡®Ç‡®∏‡©Ä ‡®∏‡©á‡®µ‡®æ‡®µ‡®æ‡®Ç ‡®®‡®æ‡®≤ ‡®ú‡©ã‡©ú ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç! ‡®∏‡®º‡®æ‡®Ç‡®§ ‡®∞‡®π‡©ã‡•§' :
                   language === 'bn' ? 'üö® ‡¶Ö‡¶¨‡¶ø‡¶≤‡¶Æ‡ßç‡¶¨‡ßá ‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø ‡¶∏‡ßá‡¶¨‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶õ‡¶ø! ‡¶∂‡¶æ‡¶®‡ßç‡¶§ ‡¶•‡¶æ‡¶ï‡ßÅ‡¶®‡•§' :
                   'üö® Connecting to emergency services immediately! Stay calm.';
        speak(response, 'high');
      }
      // Doctor portal
      else if (input.includes('doctor') || input.includes('‡§°‡•â‡§ï‡•ç‡§ü‡§∞') || input.includes('‡®°‡®æ‡®ï‡®ü‡®∞') || input.includes('‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞')) {
        onNavigate('doctor');
        response = language === 'hi' ? '‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤ ‡§ñ‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ø‡§π‡§æ‡§Ç ‡§Ü‡§™ ‡§Æ‡§∞‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•ã ‡§¶‡•á‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ ‡§®‡•Å‡§∏‡•ç‡§ñ‡•á ‡§≤‡§ø‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§' :
                   language === 'pa' ? '‡®°‡®æ‡®ï‡®ü‡®∞ ‡®™‡©ã‡®∞‡®ü‡®≤ ‡®ñ‡©ã‡®≤‡©ç‡®π ‡®∞‡®ø‡®π‡®æ ‡®π‡®æ‡®Ç‡•§ ‡®á‡©±‡®•‡©á ‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®Æ‡®∞‡©Ä‡®ú‡®º‡®æ‡®Ç ‡®®‡©Ç‡©∞ ‡®¶‡©á‡®ñ ‡®∏‡®ï‡®¶‡©á ‡®π‡©ã‡•§' :
                   language === 'bn' ? '‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶™‡ßã‡¶∞‡ßç‡¶ü‡¶æ‡¶≤ ‡¶ñ‡ßÅ‡¶≤‡¶õ‡¶ø‡•§ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶∞‡ßã‡¶ó‡ßÄ‡¶¶‡ßá‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá‡¶®‡•§' :
                   'Opening doctor portal. Here you can see patients and write prescriptions.';
      }
      // Health symptoms
      else if (input.includes('fever') || input.includes('‡§¨‡•Å‡§ñ‡§æ‡§∞') || input.includes('‡®¨‡©Å‡®ñ‡®æ‡®∞') || input.includes('‡¶ú‡ßç‡¶¨‡¶∞')) {
        response = language === 'hi' ? '‡§¨‡•Å‡§ñÿßÿ± ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§§‡§∞‡§≤ ‡§™‡§¶‡§æ‡§∞‡•ç‡§• ‡§≤‡•á‡§Ç‡•§ 102¬∞F ‡§∏‡•á ‡§ä‡§™‡§∞ ‡§Ø‡§æ 3 ‡§¶‡§ø‡§® ‡§∏‡•á ‡§Ö‡§ß‡§ø‡§ï ‡§π‡•ã ‡§§‡•ã ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§¨‡•Å‡§ï ‡§ï‡§∞‡•Ç‡§Ç?' :
                   language === 'pa' ? '‡®¨‡©Å‡®ñ‡®æ‡®∞ ‡®≤‡®à: ‡®Ü‡®∞‡®æ‡®Æ ‡®ï‡®∞‡©ã, ‡®§‡®∞‡®≤ ‡®™‡®¶‡®æ‡®∞‡®• ‡®≤‡®ì‡•§ 102¬∞F ‡®§‡©ã‡®Ç ‡®â‡©±‡®™‡®∞ ‡®π‡©ã‡®µ‡©á ‡®§‡®æ‡®Ç ‡®°‡®æ‡®ï‡®ü‡®∞ ‡®®‡©Ç‡©∞ ‡®Æ‡®ø‡®≤‡©ã‡•§' :
                   language === 'bn' ? '‡¶ú‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø: ‡¶¨‡¶ø‡¶∂‡ßç‡¶∞‡¶æ‡¶Æ ‡¶®‡¶ø‡¶®, ‡¶§‡¶∞‡¶≤ ‡¶ñ‡¶æ‡¶®‡•§ 102¬∞F ‡¶è‡¶∞ ‡¶â‡¶™‡¶∞‡ßá ‡¶π‡¶≤‡ßá ‡¶°‡¶æ‡¶ï‡ßç‡¶§‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡•§' :
                   'For fever: Rest and stay hydrated. If above 102¬∞F or persists for 3+ days, see a doctor. Should I book an appointment for you?';
      }
      else if (input.includes('headache') || input.includes('‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶') || input.includes('‡®∏‡®ø‡®∞ ‡®¶‡©Å‡®ñ‡®¶‡®æ') || input.includes('‡¶Æ‡¶æ‡¶•‡¶æ ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ')) {
        response = language === 'hi' ? '‡§∏‡§ø‡§∞‡§¶‡§∞‡•ç‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è: ‡§Ö‡§Ç‡§ß‡•á‡§∞‡•á ‡§ï‡§Æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§™‡§æ‡§®‡•Ä ‡§™‡§ø‡§è‡§Ç‡•§ ‡§§‡•á‡§ú‡§º ‡§¶‡§∞‡•ç‡§¶ ‡§Ø‡§æ ‡§¶‡•á‡§ñ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•ã ‡§§‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡•á‡§Ç‡•§' :
                   language === 'pa' ? '‡®∏‡®ø‡®∞ ‡®¶‡®∞‡®¶ ‡®≤‡®à: ‡®π‡®®‡©á‡®∞‡©á ‡®ï‡®Æ‡®∞‡©á ‡®µ‡®ø‡©±‡®ö ‡®Ü‡®∞‡®æ‡®Æ ‡®ï‡®∞‡©ã, ‡®™‡®æ‡®£‡©Ä ‡®™‡©Ä‡®ì‡•§' :
                   language === 'bn' ? '‡¶Æ‡¶æ‡¶•‡¶æ ‡¶¨‡ßç‡¶Ø‡¶•‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø: ‡¶Ö‡¶®‡ßç‡¶ß‡¶ï‡¶æ‡¶∞ ‡¶ò‡¶∞‡ßá ‡¶¨‡¶ø‡¶∂‡ßç‡¶∞‡¶æ‡¶Æ ‡¶®‡¶ø‡¶®, ‡¶™‡¶æ‡¶®‡¶ø ‡¶™‡¶æ‡¶® ‡¶ïÔøΩÔøΩÔøΩ‡ßÅ‡¶®‡•§' :
                   'For headache: Rest in a dark room, stay hydrated. If severe or with vision problems, seek immediate medical help.';
      }
      // Default: Get AI response
      else {
        response = await getAIResponse(userInput);
      }

      // Add assistant response to conversation
      const assistantMessage = { role: 'assistant' as const, content: response, timestamp: new Date() };
      setConversation(prev => [...prev, assistantMessage]);

      // Speak the response
      speak(response);

    } catch (error) {
      console.error('Error processing voice input:', error);
      const errorResponse = language === 'hi' ? '‡§Æ‡•Å‡§ù‡•á ‡§∏‡§Æ‡§ù‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§' :
                           language === 'pa' ? '‡®Æ‡©à‡®®‡©Ç‡©∞ ‡®∏‡®Æ‡®ù‡®£ ‡®µ‡®ø‡©±‡®ö ‡®ï‡©Å‡®ù ‡®∏‡®Æ‡©±‡®∏‡®ø‡®Ü ‡®π‡©ã‡®à‡•§' :
                           language === 'bn' ? '‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§' :
                           'I had trouble understanding. Please try again.';
      
      setConversation(prev => [...prev, { role: 'assistant', content: errorResponse, timestamp: new Date() }]);
      speak(errorResponse);
    } finally {
      setIsProcessing(false);
    }
  };

  // Get AI response (online/offline)
  const getAIResponse = async (userQuery: string): Promise<string> => {
    if (isOffline) {
      return getOfflineResponse(userQuery);
    }

    try {
      const response = await fetch(`https://${projectId}.supabase.co/functions/v1/make-server-54854473/api/gemini-chat`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${publicAnonKey}`,
        },
        body: JSON.stringify({
          messages: conversation.map(msg => ({ role: msg.role, content: msg.content })),
          language,
          currentPage,
          userQuery
        })
      });

      if (!response.ok) {
        throw new Error('AI service unavailable');
      }

      const data = await response.json();
      return data.response || getOfflineResponse(userQuery);
    } catch (error) {
      console.error('AI API error:', error);
      return getOfflineResponse(userQuery);
    }
  };

  // Enhanced offline responses
  const getOfflineResponse = (query: string): string => {
    const responses = {
      en: {
        greeting: "Hello! I'm your healthcare assistant. Even offline, I can help you navigate the app, provide basic health guidance, and manage your medical information. What do you need help with?",
        navigation: "I can help you navigate JanArogya. You can access patient portal, emergency services, family health records, or pharmacy information. Where would you like to go?",
        health: "For health concerns, I recommend: stay hydrated, rest well, and monitor symptoms. For serious issues, use our emergency services. Would you like me to guide you to specific health resources?",
        emergency: "üö® Emergency protocol activated! I'm preparing emergency contact information and location services. Stay calm and follow the emergency procedures.",
        default: "I'm here to help you with healthcare navigation, symptom guidance, appointment scheduling, and family health management. What specific assistance do you need?"
      },
      hi: {
        greeting: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Ç‡•§ ‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§≠‡•Ä, ‡§Æ‡•à‡§Ç ‡§ê‡§™ ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§®, ‡§¨‡•Å‡§®‡§ø‡§Ø‡§æ‡§¶‡•Ä ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®, ‡§î‡§∞ ‡§Ü‡§™‡§ï‡•Ä ‡§ö‡§ø‡§ï‡§ø‡§§‡•ç‡§∏‡§æ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏ ‡§ö‡•Ä‡§ú‡§º ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è?",
        navigation: "‡§Æ‡•à‡§Ç ‡§ú‡§®‡§Ü‡§∞‡•ã‡§ó‡•ç‡§Ø ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™ ‡§™‡•á‡§∂‡•á‡§Ç‡§ü ‡§™‡•ã‡§∞‡•ç‡§ü‡§≤, ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç, ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°, ‡§Ø‡§æ ‡§´‡§æ‡§∞‡•ç‡§Æ‡•á‡§∏‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§è‡§ï‡•ç‡§∏‡•á‡§∏ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Ü‡§™ ‡§ï‡§π‡§æ‡§Ç ‡§ú‡§æ‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        health: "‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§∏‡§Ç‡§¨‡§Ç‡§ß‡•Ä ‡§ö‡§ø‡§Ç‡§§‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§Æ‡•à‡§Ç ‡§∏‡•Å‡§ù‡§æ‡§§‡§æ ‡§π‡•Ç‡§Ç: ‡§π‡§æ‡§á‡§°‡•ç‡§∞‡•á‡§ü‡•á‡§° ‡§∞‡§π‡•á‡§Ç, ‡§Ö‡§ö‡•ç‡§õ‡§æ ‡§Ü‡§∞‡§æ‡§Æ ‡§ï‡§∞‡•á‡§Ç, ‡§î‡§∞ ‡§≤‡§ï‡•ç‡§∑‡§£‡•ã‡§Ç ‡§™‡§∞ ‡§®‡§ú‡§º‡§∞ ‡§∞‡§ñ‡•á‡§Ç‡•§ ‡§ó‡§Ç‡§≠‡•Ä‡§∞ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§π‡§Æ‡§æ‡§∞‡•Ä ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡•á‡§µ‡§æ‡§ì‡§Ç ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç‡•§",
        emergency: "üö® ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§™‡•ç‡§∞‡•ã‡§ü‡•ã‡§ï‡•â‡§≤ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§∏‡§Ç‡§™‡§∞‡•ç‡§ï ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§î‡§∞ ‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡•á‡§µ‡§æ‡§è‡§Ç ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç‡•§ ‡§∂‡§æ‡§Ç‡§§ ‡§∞‡§π‡•á‡§Ç‡•§",
        default: "‡§Æ‡•à‡§Ç ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§∂‡§®, ‡§≤‡§ï‡•ç‡§∑‡§£ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®, ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§∂‡•á‡§°‡•ç‡§Ø‡•Ç‡§≤‡§ø‡§Ç‡§ó, ‡§î‡§∞ ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡§ø‡§ï ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§™‡•ç‡§∞‡§¨‡§Ç‡§ß‡§® ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•Ç‡§Ç‡•§ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏ ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à?"
      }
    };

    const langResponses = responses[language] || responses.en;
    const input = query.toLowerCase();

    if (input.includes('hello') || input.includes('hi') || input.includes('‡§®‡§Æ‡§∏‡•ç‡§§‡•á') || input.includes('‡§π‡•à‡§≤‡•ã')) {
      return langResponses.greeting;
    } else if (input.includes('navigate') || input.includes('go') || input.includes('‡§®‡•á‡§µ‡§ø‡§ó‡•á‡§ü') || input.includes('‡§ú‡§æ‡§ì')) {
      return langResponses.navigation;
    } else if (input.includes('emergency') || input.includes('‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤') || input.includes('help') || input.includes('‡§Æ‡§¶‡§¶')) {
      return langResponses.emergency;
    } else if (input.includes('health') || input.includes('‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø') || input.includes('symptom') || input.includes('‡§≤‡§ï‡•ç‡§∑‡§£')) {
      return langResponses.health;
    } else {
      return langResponses.default;
    }
  };

  // Initialize with greeting
  useEffect(() => {
    if (isOpen && conversation.length === 0) {
      const greeting = { role: 'assistant' as const, content: content.greeting[language], timestamp: new Date() };
      setConversation([greeting]);
      setTimeout(() => speak(greeting.content), 500);
    }
  }, [isOpen, language]);

  return (
    <>
      {/* Floating AI Assistant Button */}
      <motion.div
        className="fixed bottom-6 right-6 z-50"
        initial={{ scale: 0, rotate: -180 }}
        animate={{ scale: 1, rotate: 0 }}
        transition={{ type: "spring", stiffness: 260, damping: 20 }}
      >
        <motion.button
          onClick={() => setIsOpen(!isOpen)}
          className="relative bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 
                     text-white rounded-full p-4 shadow-2xl transition-all duration-300 transform hover:scale-110"
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.95 }}
        >
          <AnimatePresence>
            {isListening && (
              <motion.div
                className="absolute inset-0 rounded-full bg-red-500 opacity-30"
                animate={{ scale: [1, 1.2, 1] }}
                transition={{ repeat: Infinity, duration: 1 }}
              />
            )}
          </AnimatePresence>
          
          <div className="relative">
            {isProcessing ? (
              <Loader2 className="w-8 h-8 animate-spin" />
            ) : isListening ? (
              <motion.div
                animate={{ scale: [1, 1.1, 1] }}
                transition={{ repeat: Infinity, duration: 0.5 }}
              >
                <Mic className="w-8 h-8" />
              </motion.div>
            ) : (
              <Bot className="w-8 h-8" />
            )}
          </div>
          
          {/* Status indicators */}
          <div className="absolute -top-2 -right-2 flex space-x-1">
            {isOffline && (
              <motion.div
                className="bg-orange-500 rounded-full p-1"
                animate={{ pulse: [1, 1.2, 1] }}
                transition={{ repeat: Infinity, duration: 2 }}
              >
                <WifiOff className="w-3 h-3 text-white" />
              </motion.div>
            )}
            <motion.div
              className="bg-green-500 rounded-full p-1"
              animate={{ pulse: [1, 1.2, 1] }}
              transition={{ repeat: Infinity, duration: 3 }}
            >
              <Heart className="w-3 h-3 text-white" />
            </motion.div>
          </div>
        </motion.button>
      </motion.div>

      {/* AI Assistant Panel */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            className="fixed bottom-24 right-6 w-96 max-w-[calc(100vw-3rem)] z-40"
            initial={{ opacity: 0, y: 50, scale: 0.9 }}
            animate={{ opacity: 1, y: 0, scale: 1 }}
            exit={{ opacity: 0, y: 50, scale: 0.9 }}
            transition={{ type: "spring", stiffness: 300, damping: 30 }}
          >
            <div className="bg-white rounded-3xl shadow-2xl border border-gray-100 overflow-hidden">
              {/* Header */}
              <div className="bg-gradient-to-r from-emerald-500 to-emerald-600 p-6 relative overflow-hidden">
                <motion.div
                  className="absolute inset-0 bg-white opacity-10"
                  animate={{ 
                    background: [
                      "radial-gradient(circle at 20% 50%, white 0%, transparent 50%)",
                      "radial-gradient(circle at 80% 50%, white 0%, transparent 50%)",
                      "radial-gradient(circle at 20% 50%, white 0%, transparent 50%)"
                    ]
                  }}
                  transition={{ repeat: Infinity, duration: 4 }}
                />
                
                <div className="relative flex items-center space-x-4">
                  <motion.div
                    className="text-4xl"
                    animate={{ 
                      rotate: aiPersonality.mood === 'energetic' ? [0, 10, -10, 0] : 0 
                    }}
                    transition={{ repeat: Infinity, duration: 2 }}
                  >
                    {aiPersonality.avatar}
                  </motion.div>
                  
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-white mb-1">
                      {aiPersonality.name}
                    </h3>
                    <p className="text-emerald-100 text-sm flex items-center space-x-2">
                      <Brain className="w-4 h-4" />
                      <span>
                        {isOffline ? 
                          (language === 'hi' ? '‡§ë‡§´‡§≤‡§æ‡§á‡§® ‡§Æ‡•ã‡§° - ‡§∏‡•ç‡§•‡§æ‡§®‡•Ä‡§Ø AI' : 
                           language === 'pa' ? '‡®î‡®´‡®≤‡®æ‡®à‡®® ‡®Æ‡©ã‡®°' :
                           language === 'bn' ? '‡¶Ö‡¶´‡¶≤‡¶æ‡¶á‡¶® ‡¶Æ‡ßã‡¶°' :
                           'Offline Mode - Local AI') :
                          (language === 'hi' ? 'Gemini AI ‡§¶‡•ç‡§µ‡§æ‡§∞‡§æ ‡§∏‡§Ç‡§ö‡§æ‡§≤‡§ø‡§§' : 
                           language === 'pa' ? 'Gemini AI ‡®¶‡©Å‡®Ü‡®∞‡®æ ‡®∏‡©∞‡®ö‡®æ‡®≤‡®ø‡®§' :
                           language === 'bn' ? 'Gemini AI ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ ‡¶ö‡¶æ‡¶≤‡¶ø‡¶§' :
                           'Powered by Gemini AI')
                        }
                      </span>
                      <Sparkles className="w-3 h-3" />
                    </p>
                  </div>
                  
                  <motion.button
                    onClick={() => setIsOpen(false)}
                    className="text-white hover:text-emerald-200 transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    ‚úï
                  </motion.button>
                </div>
              </div>

              {/* Conversation Area */}
              <div 
                ref={conversationRef}
                className="h-80 overflow-y-auto p-4 space-y-4 bg-gradient-to-b from-gray-50 to-white"
              >
                <AnimatePresence>
                  {conversation.map((message, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      exit={{ opacity: 0, y: -20 }}
                      className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}
                    >
                      <div className={`max-w-xs lg:max-w-md px-4 py-3 rounded-2xl ${
                        message.role === 'user' 
                          ? 'bg-emerald-500 text-white ml-4' 
                          : 'bg-white text-gray-800 mr-4 shadow-md border border-gray-100'
                      }`}>
                        {message.role === 'assistant' && (
                          <div className="flex items-center space-x-2 mb-2">
                            <span className="text-lg">{aiPersonality.avatar}</span>
                            <span className="text-xs text-gray-500">Dr. Maya</span>
                          </div>
                        )}
                        <p className="text-sm leading-relaxed">{message.content}</p>
                        <p className="text-xs opacity-70 mt-1">
                          {message.timestamp.toLocaleTimeString()}
                        </p>
                      </div>
                    </motion.div>
                  ))}
                </AnimatePresence>

                {/* Current transcript */}
                {isListening && currentTranscript && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex justify-end"
                  >
                    <div className="bg-emerald-100 text-emerald-800 px-4 py-2 rounded-2xl max-w-xs">
                      <p className="text-sm italic">"{currentTranscript}"</p>
                    </div>
                  </motion.div>
                )}

                {/* Processing indicator */}
                {isProcessing && (
                  <motion.div
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    className="flex justify-start"
                  >
                    <div className="bg-white text-gray-800 px-4 py-3 rounded-2xl shadow-md border border-gray-100 flex items-center space-x-2">
                      <Loader2 className="w-4 h-4 animate-spin text-emerald-500" />
                      <p className="text-sm">{content.processing[language]}</p>
                    </div>
                  </motion.div>
                )}
              </div>

              {/* Controls */}
              <div className="p-4 bg-gray-50 border-t border-gray-100">
                <div className="flex items-center justify-between">
                  <motion.button
                    onClick={isListening ? stopListening : startListening}
                    className={`flex-1 mr-2 py-3 px-4 rounded-xl font-medium transition-all duration-200 flex items-center justify-center space-x-2 ${
                      isListening 
                        ? 'bg-red-500 hover:bg-red-600 text-white' 
                        : 'bg-emerald-500 hover:bg-emerald-600 text-white'
                    }`}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    disabled={isProcessing}
                  >
                    {isListening ? <MicOff className="w-5 h-5" /> : <Mic className="w-5 h-5" />}
                    <span>
                      {isListening 
                        ? (language === 'hi' ? '‡§∞‡•Å‡§ï‡•á‡§Ç' : language === 'pa' ? '‡®∞‡©Å‡®ï‡©ã' : language === 'bn' ? '‡¶•‡¶æ‡¶Æ‡ßÅ‡¶®' : 'Stop')
                        : (language === 'hi' ? '‡§¨‡•ã‡§≤‡•á‡§Ç' : language === 'pa' ? '‡®¨‡©ã‡®≤‡©ã' : language === 'bn' ? '‡¶¨‡¶≤‡ßÅ‡¶®' : 'Speak')
                      }
                    </span>
                  </motion.button>

                  <motion.button
                    onClick={() => {
                      speechSynthesis.cancel();
                      setIsSpeaking(false);
                    }}
                    className="p-3 text-gray-500 hover:text-gray-700 transition-colors"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                  >
                    {isSpeaking ? <VolumeX className="w-5 h-5" /> : <Volume2 className="w-5 h-5" />}
                  </motion.button>
                </div>

                {/* Quick Actions */}
                <div className="mt-3 grid grid-cols-2 gap-2">
                  {[
                    { 
                      icon: Calendar, 
                      label: language === 'hi' ? '‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü' : language === 'pa' ? '‡®Æ‡©Å‡®≤‡®æ‡®ï‡®æ‡®§' : language === 'bn' ? '‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶Æ‡ßá‡¶®‡ßç‡¶ü' : 'Appointment',
                      action: () => handleVoiceInput(language === 'hi' ? '‡§Æ‡•Å‡§ù‡•á ‡§°‡•â‡§ï‡•ç‡§ü‡§∞ ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§®‡§æ ‡§π‡•à' : 'I want to see a doctor')
                    },
                    { 
                      icon: Pill, 
                      label: language === 'hi' ? '‡§¶‡§µ‡§æ' : language === 'pa' ? '‡®¶‡®µ‡®æ‡®à' : language === 'bn' ? '‡¶ì‡¶∑‡ßÅ‡¶ß' : 'Medicine',
                      action: () => handleVoiceInput(language === 'hi' ? '‡§Æ‡•Å‡§ù‡•á ‡§¶‡§µ‡§æ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡§ø‡§è' : 'I need medicine information')
                    },
                    { 
                      icon: Users, 
                      label: language === 'hi' ? '‡§™‡§∞‡§ø‡§µ‡§æ‡§∞' : language === 'pa' ? '‡®™‡®∞‡®ø‡®µ‡®æ‡®∞' : language === 'bn' ? '‡¶™‡¶∞‡¶ø‡¶¨‡¶æ‡¶∞' : 'Family',
                      action: () => handleVoiceInput(language === 'hi' ? '‡§Æ‡•á‡§∞‡•á ‡§™‡§∞‡§ø‡§µ‡§æ‡§∞ ‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§¶‡•á‡§ñ‡§®‡§æ ‡§π‡•à' : 'Show my family health')
                    },
                    { 
                      icon: ShieldAlert, 
                      label: language === 'hi' ? '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤' : language === 'pa' ? '‡®ê‡®Æ‡®∞‡®ú‡©à‡®Ç‡®∏‡©Ä' : language === 'bn' ? '‡¶ú‡¶∞‡ßÅ‡¶∞‡¶ø' : 'Emergency',
                      action: () => handleVoiceInput(language === 'hi' ? '‡§Ü‡§™‡§æ‡§§‡§ï‡§æ‡§≤‡•Ä‡§® ‡§Æ‡§¶‡§¶ ‡§ö‡§æ‡§π‡§ø‡§è' : 'I need emergency help')
                    }
                  ].map((item, index) => (
                    <motion.button
                      key={index}
                      onClick={item.action}
                      className="flex items-center space-x-2 p-2 bg-white hover:bg-emerald-50 rounded-lg border border-gray-200 hover:border-emerald-200 transition-colors text-sm"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <item.icon className="w-4 h-4 text-emerald-600" />
                      <span className="text-gray-700">{item.label}</span>
                    </motion.button>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}